/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id "application"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    testImplementation(
            // Use TestNG framework, also requires calling test.useTestNG() below
            "org.testng:testng:7.5",

            // Guice dependency injection framework
            "com.google.inject:guice:5.1.0",

            // Jackson Json parser for Java
            "com.fasterxml.jackson.core:jackson-databind:2.14.2",
            // Jackson support for properties format file (*.properties)
            "com.fasterxml.jackson.dataformat:jackson-dataformat-properties:2.14.2",

            // Appium java client
            "io.appium:java-client:8.3.0",
            
            "org.seleniumhq.selenium:selenium-java:4.8.1",

            // Extent reports
            "com.aventstack:extentreports:5.0.9",

            // Log4j2 api, core, and slf4j bridge
            "org.slf4j:slf4j-api:2.0.6",
            "org.apache.logging.log4j:log4j-core:2.19.0",
            "org.apache.logging.log4j:log4j-slf4j2-impl:2.19.0",
    )


    testCompileOnly(
            // Lombok
            "org.projectlombok:lombok:1.18.26"
    )
    testAnnotationProcessor(
            // Lombok
            "org.projectlombok:lombok:1.18.26"
    )
}

sourceSets {
    test {
        resources {
            srcDirs += ["resources"]
        }
    }
}

tasks.register("testng", JavaExec) {
    description = "Run TestNG tests from command line."
    group = "verification"
    dependsOn testClasses
    mainClass.set("org.testng.TestNG")
    classpath += sourceSets.test.runtimeClasspath
    
    jvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED"]

    systemProperties System.getProperties()
    def xmlFile = System.getProperty("xmlFiles", "resources/testng.xml")
    def arguments = [xmlFile]
    def parallel = System.getProperty("parallel", "false")
    def testNames = System.getProperty("tests", "")
    if (!testNames.isBlank()) {
        arguments.add("-testnames")
        arguments.add(testNames)
    }
    if (parallel == "true") {
        arguments.add("-parallel")
        arguments.add("tests")
        arguments.add("-threadcount")
        arguments.add("4")
    }
    arguments.add("-usedefaultlisteners")
    arguments.add("false")
    args = arguments
}

test {
    // pass all system properties to java code
    systemProperties System.getProperties()
    def parallelEnabled = System.getProperty("parallel", "false")
    systemProperty "parallel", parallelEnabled

    // Use TestNG for unit tests.
    useTestNG() {
//        listeners << "cross.platform.test.suite.configuration.listener.TestNGAlterListener"
        suites "resources/testng.xml"
        if (parallelEnabled == "true") {
            parallel = "tests"
            threadCount = 4
        }
        testName = ""
        suiteName = "defaultSuite"
         
        preserveOrder = true
        doFirst {
            println outputDirectory.toString()
        }
    }

    outputs.upToDateWhen { false }
    testLogging {
        events = ["standardError", "skipped", "failed"]
        exceptionFormat = "full"
    }

    onOutput { descriptor, event ->
        if (event.destination == TestOutputEvent.Destination.StdOut) {
            logger.lifecycle(event.message.replaceFirst(/\s+$/, ""))
        }
    }
}

tasks.withType(Javadoc).configureEach {
    enabled = false
}


